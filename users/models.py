from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models
from django.contrib.auth.models import User
from django import forms


#/***************************************************************************************
#*  REFERENCES
#*
#*  Title: Which is the proper way of calculating average reviews and review count? Precalculated fields or using @property?
#*  URL: https://www.reddit.com/r/django/comments/kp6rz4/which_is_the_proper_way_of_calculating_average/
#*
#*  Title: Average for ratings in Django
#*  URL:https://stackoverflow.com/questions/60602349/average-for-ratings-in-django
#*
#* Some code from the ratings model generated by ChatGPT
#*****************************************************************/

# Create your models here.

class Profile(User):
    user = models.OneToOneField(User, related_name = "profile_user",on_delete=models.CASCADE)
    admin = models.BooleanField()
    profile_made = models.BooleanField()


class Locations(models.Model):
    name = models.CharField(max_length=500)
    zipcode = models.CharField(max_length=200,blank=True, null=True)
    city = models.CharField(max_length=200,blank=True, null=True)
    country = models.CharField(max_length=200,blank=True, null=True)
    address = models.CharField(max_length=200,blank=True, null=True)
    approved = models.BooleanField(default=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='locations', null=True)


    ## Code from https://www.reddit.com/r/django/comments/kp6rz4/which_is_the_proper_way_of_calculating_average/
    rating_average = models.FloatField(default=0)
    rating_count = models.FloatField(default=0)

    def update_rating_fields(self):
        ratings = self.ratings.all()
        rating_avg = ratings.aggregate(models.Avg('rating')).get('rating__avg', 0.0)
        self.rating_average = round(rating_avg, 3) if rating_avg is not None else 0.0
        self.rating_count = ratings.count()
        self.save(update_fields=['rating_average', 'rating_count'])

    lat = models.CharField(max_length=200,blank=True, null=True)
    lng = models.CharField(max_length=200,blank=True, null=True)
    place_id = models.CharField(max_length=200,blank=True, null=True)

    def __str__(self):
        return self.name

class Rating(models.Model): # Model from: https://www.reddit.com/r/django/comments/kp6rz4/which_is_the_proper_way_of_calculating_average/
   location = models.ForeignKey(Locations, related_name='ratings', on_delete=models.CASCADE)

   ## Validator from: https://stackoverflow.com/questions/60602349/average-for-ratings-in-django
   rating = models.IntegerField(
       default=1, validators=[MinValueValidator(1), MaxValueValidator(10)]
   )
   description = models.TextField()

   def save(self, *args, **kwargs):
       super(Rating, self).save(*args, **kwargs)
       self.location.update_rating_fields()

class Distances (models.Model): 
    from_location = models.ForeignKey(Locations, related_name = 'from_location', on_delete=models.CASCADE)
    to_location = models.ForeignKey(Locations, related_name = 'to_location', on_delete=models.CASCADE)
    mode = models.CharField(max_length=200, blank=True, null=True)
    distance_km = models.DecimalField(max_digits=10, decimal_places=2)
    duration_mins = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True,blank=True, null=True)
    edited_at = models.DateTimeField(auto_now_add=True,blank=True, null=True)


    def __str__(self): ## from chatGPT
        return f"Distance from {self.from_location} to {self.to_location}"


class Feedback(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True)
    location = models.ForeignKey(Locations, on_delete=models.CASCADE, null=True)
    message = models.TextField()

    def __str__(self):
        return f'{self.user.username} - {self.message}'

class UserRating(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.ForeignKey(Rating, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('user', 'rating')

class LocationImage(models.Model):
    location = models.ForeignKey(Locations, related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='location_images/')